// Functions
// =========

@include test-module("susyone functions") {
  // container-outer-width
  @include test("container-outer-width") {
    $width: container-outer-width();
    $expect: 59em;
    @include assert-equal($width, $expect,
      "Returns the correct outer width of a default container."
    );
    $width: container-outer-width(8);
    $expect: 39em;
    @include assert-equal($width, $expect,
      "Returns the correct outer width whith specified columns."
    );
    $width: container-outer-width(12, 80em);
    $expect: 78em;
    @include assert-equal($width, $expect,
      "Returns correct outer width when columns and outerwidth is specified."
    );
    $border-box-sizing: true !global;
    $width: container-outer-width(12, 80%);
    $expect: 80%;
    @include assert-equal($width, $expect,
      "Returns correct outer width when columns and outerwidth is specified."
    );
    $border-box-sizing: false !global;
  }

  // get-layout
  @include test("get-layout") {
    $test: get-layout(30em);
    $expect: 7;
    @include assert-equal($test, $expect,
      "Returns correct layout based on min width."
    );
  }

  // format-nth
  @include test("format-nth") {
    $test: format-nth(3);
    $expect: "nth-child(3)";
    @include assert-equal($test, $expect,
      "Returns correct selector for nth-child."
    );
    $test: format-nth(first);
    $expect: "first-child";
    @include assert-equal($test, $expect,
      "Returns correct selector for first-child."
    );
    $test: format-nth(last);
    $expect: "last-child";
    @include assert-equal($test, $expect,
      "Returns correct selector for last-child."
    );
    $test: format-nth(only);
    $expect: "only-child";
    @include assert-equal($test, $expect,
      "Returns correct selector for only child."
    );
  }

  // columns-width
  @include test("columns-width") {
    $test: columns-width();
    $expect: 59em;
    @include assert-equal($test, $expect,
      "Returns the full width of a grid based on grid settings."
    );
    $test: columns-width(24);
    $expect: 119em;
    @include assert-equal($test, $expect,
      "Returns the full width of a grid based on custom param."
    );
    $test: columns-width(0);
    $expect: 0;
    @include assert-equal($test, $expect,
      "Returns the full width of a grid based on custom param."
    );
  }

  // relative-width
  @include test("relative-width") {
    $test: relative-width(4em, 24);
    $expect: percentage(4em / 119em); // 3.36134%
    @include assert-equal($test, $expect,
      "Returns width based on percentage of given context."
    );
  }

  // columns
  @include test("columns") {
    $test: columns(12, 24, static);
    $expect: 59em;
    @include assert-equal($test, $expect,
      "Returns proper layout."
    );
    $test: columns(12, 12, fluid);
    $expect: 100%;
    @include assert-equal($test, $expect,
      "Returns proper layout."
    );
    $test: columns(12, 24, fluid);
    $expect: percentage(59em / 119em);
    @include assert-equal($test, $expect,
      "Returns proper layout."
    );
  }

  // medialayout
  @include test("medialayout") {
    $test: medialayout(30em 12 60em);
    $expect: 30em 12 60em false;
    @include assert-equal($test, $expect,
      "Works with three arguments. $min: 30em, $cols: 12, $max: 30em ."
    );
    $test: medialayout(12);
    $expect: false 12 false false;
    @include assert-equal($test, $expect,
      "Works with one argument for columns."
    );
    $test: medialayout(12 lt-ie8);
    $expect: false 12 false lt-ie8;
    @include assert-equal($test, $expect,
      "Works with columns and ie support."
    );
    $test: medialayout(60em 12 30em lt-ie9);
    $expect: 30em 12 60em lt-ie9;
    @include assert-equal($test, $expect,
      "Works with four arguments for min-width, columns, max-width and IE fallback."
    );
  }

  // is-default-layout
  @include test("is-default-layout") {
    $test: is-default-layout(30em 12 60em);
    $expect: false;
    @include assert-equal($test, $expect,
      "Returns false if $media-layout overrides the default layout."
    );
    $test: is-default-layout(12);
    $expect: true;
    @include assert-equal($test, $expect,
      "Returns true if $media-layout matches default coulms."
    );
    $test: is-default-layout(12 lt-ie8);
    $expect: true;
    @include assert-equal($test, $expect,
      "Returns true if $media-layout matches default coulms."
    );
    @include assert-equal(
      is-default-layout(60em 12 30em lt-ie9),
      false,
      "Returns false if $media-layout overrides the default layout."
    );
  }

  // split-columns-values
  @include test("split-columns-value") {
    @include assert-equal(
      split-columns-value(12 omega),
      12,
      "Returns just column count when given two arguments."
    );
    @include assert-equal(
      split-columns-value(9),
      9,
      "Returns just column count when given one argument."
    );
    @include assert-equal(
      split-columns-value(24 omega, columns),
      24,
      "Returns column count when spcified."
    );
    @include assert-equal(
      split-columns-value(9 omega, position),
      omega,
      "Returns column position when specified."
    );
  }

  // TODO:
  //
  // Layout:
  // gutter();
  // format-nth();

  // Ems:
  // base-ems();
  // absolute-ems();
  // fix-ems();

}
